#!/bin/bash
#
# configuration application script.
# See the README for details.
#
#--------------------------------------------------------------------------------
# Configuration settings
#--------------------------------------------------------------------------------
source settings
#--------------------------------------------------------------------------------

if [ ! "$PWD" = "$HOME/config" ]
then
    echo "config apply error: This script can only be run from the config_and_scripts repo root directory, cloned as \$HOME/config/."
    exit 0
fi

# xdg/freedesktop.org stuff
#--------------------------------------------------------------------------------
# On debian, some XDG variables such as XDG_DATA_HOME are not set, as they have well-defined default values in the specification.
# Just in case these variables are set on the current system, use them, and if not, follow the defaults described in the spec:
# https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html#variables
set_xdg_dir()
{
    varname=$1
    xdg_varname=$2
    xdg_default=$3
    if [[ -v $xdg_varname ]]
    then
        declare -g $varname="${!xdg_varname}"
        echo "\$$varname: ${!xdg_varname}"
    else
        declare -g $varname="$xdg_default"
        echo "\$$varname: $xdg_default"
    fi
}
echo "Determining XDG variables..."
set_xdg_dir xdg_config_home XDG_CONFIG_HOME "$HOME/.config"
set_xdg_dir xdg_cache_home XDG_CACHE_HOME "$HOME/.cache"
set_xdg_dir xdg_data_home XDG_DATA_HOME "$HOME/.local/share"
set_xdg_dir xdg_state_home XDG_STATE_HOME "$HOME/.local/state"
set_xdg_dir xdg_config_dirs XDG_CONFIG_DIRS "/etc/xdg"
set_xdg_dir xdg_data_dirs XDG_DATA_DIRS "/usr/local/share:/usr/share"
#TODO: "XDG_LOCAL_HOME"? See spec.

# Linux kernel stuff
#--------------------------------------------------------------------------------
LINUX_KERNEL_RELEASE="$(uname -r)"

# Link functions
#--------------------------------------------------------------------------------
create_link()
{
    ln -n -s "$1" "$2"
}
link_system_to_config()
{
    # Make sure the symlink put on the system has an absolute path to the file/dir in this config repo.
    target="$(realpath -s "$1")"
    link_name="$2"
    # NOTE: -e generally checks if a file exists, but if it is a symlink, this checks the followed symlink.
    if [ -e "$link_name" ] || [ -h "$link_name" ]
    then
        # The file already exists on the system.
        if [ -h "$link_name" ] && [[ $(readlink -f "$link_name")/ = $HOME/config/* ]]
        then
            # If the existing file is a symlink into this repo, overwrite without asking
            rm -r "$link_name"
            create_link "$target" "$link_name"
            echo "Updated link in system: $link_name ---> $target"
        else
            # Fail to create a symlink, as the user already has e.g. a ~/.vimrc on their system, which is not a symlink into this repo.
            echo "WARNING: $link_name already exists and isn't controlled by this config repo. Ignored."
        fi
    else
        create_link "$target" "$link_name"
        echo "Created link in system: $link_name ---> $target"
    fi
}
declare -a config_symlinks_to_gitignore
link_config_to_system()
{
    target="$1"
    link_name="$2"
    # TODO: Sanity-check that the link is to be placed in this repo.
    #       Or this might wipe a random file because of a typo...
    # NOTE: -e generally checks if a file exists, but if it is a symlink, this checks the followed symlink.
    if [ -e "$link_name" ] || [ -h "$link_name" ]
    then
        rm -r "$link_name"
    fi
    create_link "$target" "$link_name"
    echo "Created navigation link in config: $link_name ---> $target"
    config_symlinks_to_gitignore+=("$link_name")
}

# Setup symlinks on system to this config dir.
#--------------------------------------------------------------------------------
echo
link_system_to_config ./vim/runtime ~/.vim
link_system_to_config ./vim/vimrc.vim ~/.vimrc
link_system_to_config ./emacs/infokey ~/.infokey
link_system_to_config ./shell/profile.sh ~/.profile
link_system_to_config ./shell/bashrc.sh ~/.bashrc
link_system_to_config ./shell/bash_aliases.sh ~/.bash_aliases
link_system_to_config ./shell/bash_profile.sh ~/.bash_profile
link_system_to_config ./shell/bash_logout.sh ~/.bash_logout
link_system_to_config ./gdb/gdbinit.gdb ~/.gdbinit
link_system_to_config ./gdb/ ~/.gdb
link_system_to_config ./X/Xresources.txt ~/.Xresources
link_system_to_config ./X/xinitrc ~/.xinitrc
link_system_to_config ./X/xsession ~/.xsession
link_system_to_config ./screen/screenrc.txt ~/.screenrc
link_system_to_config ./screen/screendir ~/.screen
link_system_to_config ./readline/inputrc ~/.inputrc
link_system_to_config ./pager/lesskey.txt ~/.lesskey
link_system_to_config ./git/gitconfig ~/.gitconfig

# See `man tig`'s FILES section.
mkdir -p "$xdg_config_home/tig"
link_system_to_config ./git/tigrc "$xdg_config_home/tig/config"

link_system_to_config ./i3 "$xdg_config_home/i3"
link_system_to_config ./scripts ~/scripts
link_system_to_config source-highlight ~/.source-highlight
link_system_to_config lf "$xdg_config_home/lf"
link_system_to_config qutebrowser "$xdg_config_home/qutebrowser"
link_system_to_config nvim/runtime "$xdg_config_home/nvim"
link_system_to_config debian/dpkg.cfg ~/.dpkg.cfg
link_system_to_config cool-retro-term/cool-retro-term-config "$xdg_config_home/cool-retro-term"

# Setup symlinks in this directory to system files.
#--------------------------------------------------------------------------------
# This is for convenient navigation of config. The directory contents, and the symlinks themselves, are not tracked by git.
# The symlinks are not tracked because they could point to different places on different machines, e.g. with different usernames.
#
# These symlinks should be in .gitignore.
# TODO: How to do this automatically?

# system debian symlinks
echo
echo "Creating debian navigation symlinks in ./debian/..."
link_config_to_system /etc/apt/sources.list ./debian/sources.list
link_config_to_system /etc/apt/sources.list.d ./debian/sources.list.d
link_config_to_system /var/lib/apt ./debian/aptdir
link_config_to_system /var/log/apt ./debian/aptlogs
link_config_to_system /var/lib/dpkg ./debian/dpkgdir

# system xdg symlinks
echo
echo "Creating debian xdg navigation symlinks in ./freedesktop.org/..."
link_config_to_system "$xdg_config_home" ./freedesktop.org/xdg_config_home
link_config_to_system "$xdg_cache_home" ./freedesktop.org/xdg_cache_home
link_config_to_system "$xdg_state_home" ./freedesktop.org/xdg_state_home
link_config_to_system "$xdg_data_home" ./freedesktop.org/xdg_data_home
link_config_to_system "$xdg_data_home/Trash" ./freedesktop.org/Trash
create_xdg_dir_symlinks()
{
    xdg_dirs_var="$1"
    while read -r dirpath
    do
        if [ $opt_generate_dangling_system_symlinks -eq 1 ] || [ -d "$dirpath" ]
        then
            mangled_path="$(echo -n "$dirpath" | tr '/' '_' | tr ' ' '_')"
            link_config_to_system "$dirpath" "./freedesktop.org/$xdg_dirs_var@$mangled_path"
        else
            echo "$xdg_dirs_var: $dirpath not found. Not creating symlink."
        fi
    done < <(echo "${!xdg_dirs_var}" | tr ':' '\n')
}
create_xdg_dir_symlinks xdg_config_dirs
create_xdg_dir_symlinks xdg_data_dirs

echo
echo "Creating general navigation symlinks..."
# Query the vim version.
# Note that it is expected that the system runs just one version of vim when invoked on the command line,
# although other vims may be installed, so VIMRUNTIME_NUMBER should be the same from any shell.
# This would not be the case with different vim versions installed and accessible by different PATHs e.g. in a login vs non-login shell.
#
# todo: This logic is not nice. Expects to be in /usr/local/share.
VIMRUNTIME_NUMBER="$(vim --version | head -1 | sed -En -e 's/^VIM - Vi IMproved ([[:digit:]]+\.[[:digit:]]+) .*$/\1/' -e 's/\.//p')"
link_config_to_system "/usr/local/share/vim/vim$VIMRUNTIME_NUMBER" ./vim/system_runtime

link_config_to_system /etc/inputrc ./readline/system_inputrc
link_config_to_system "$xdg_data_home/applications" ./freedesktop.org/user_applications
link_config_to_system "$xdg_config_home/mimeapps.list" ./freedesktop.org/mimeapps.list
link_config_to_system "$HOME/.local/lib/python3.10/" ./python/local_python3.10
link_config_to_system "$HOME/.python_history" ./python/python_history
link_config_to_system "$xdg_config_home/qutebrowser" ./qutebrowser/qutebrowser
link_config_to_system "$HOME/.bash_history" ./shell/bash_history
link_config_to_system "$xdg_state_home/nvim" nvim/state
link_config_to_system "/lib/modules/$LINUX_KERNEL_RELEASE" linux/modules
link_config_to_system "/etc/fstab" linux/@etc@fstab
link_config_to_system "/etc/mtab" linux/@etc@mtab
link_config_to_system "/etc/udev" "systemd/@etc@udev"
link_config_to_system "/lib/systemd" "systemd/@lib@systemd"
link_config_to_system "/lib/udev" "systemd/@lib@udev"
link_config_to_system "/usr/local/lib/udev" "systemd/@usr@local@lib@udev"
link_config_to_system "/run/udev" "systemd/@run@udev"

# Distribute "override" files to system directories.
#--------------------------------------------------------------------------------
echo
echo "Distributing "override" files to system directories."
# The system saves files in here, so don't want to copy those to this repo.
# Currently can't think of a nice symlink-overlay solution. Possible?
# overlayfs possibly, but way too much to do for such a simple thing. Also I think this supposes read-only for underlying directory.
# Or, can xdg be configured to look for applications in an additional user-specified directory?
(
    distribute_override_file()
    (
        override_file="$1"
        into_dir="$2"
        cp --target="$into_dir" "$override_file"
        echo "Inserted $override_file into $into_dir"
    )
    export -f distribute_override_file
    # Using find -exec to execute a bash function.
    # https://stackoverflow.com/questions/4321456/find-exec-a-shell-function-in-linux
    find freedesktop.org/xdg_override_applications/ -name '*.desktop' -exec bash -c 'distribute_override_file "$1" "$2"' -- {} "$xdg_data_home/applications" \;
    find freedesktop.org/xdg_override_autostart/ -name '*.desktop' -exec bash -c 'distribute_override_file "$1" "$2"' -- {} "$xdg_config_home/autostart" \;
)

# Configure XDG with e.g. an expected default web browser.
#--------------------------------------------------------------------------------
apply_xdg_settings()
{
    local desktop_file_dirs=("/usr/share/applications" "/usr/local/share/applications" "~/.local/share/applications")

    desktop_file_exists()
    {
        local desktop_basename="$1"
        for dirpath in "${desktop_file_dirs[@]}"
        do
            if [ -f $dirpath/$desktop_basename.desktop ] ; then
                return 0
            fi
        done
        return 1
    }

    echo "Applying XDG settings..."
    local did_set_web_browser=0
    for app in "${opt_web_browser_priorities[@]}"
    do
        if desktop_file_exists "$app"
        then
            echo "$app.desktop found, setting it to the default web browser."
            xdg-settings set default-web-browser "$app.desktop"
            did_set_web_browser=1
            break
        fi
    done
    if [ $did_set_web_browser -eq 0 ] ; then
        echo "Couldn't find any of the web browser priorities: (${opt_web_browser_priorities[@]})"
        echo "Letting the system  use its own default web browser."
    fi
}
echo
apply_xdg_settings
unset -f apply_xdg_settings

# Generate a .gitignore file.
#--------------------------------------------------------------------------------
echo
echo "Creating .gitignore..."
cat base_gitignore > .gitignore
echo "Initialized with ./base_gitignore."
echo "" >> .gitignore
echo "# Ignore system symlinks" >> .gitignore
printf '%s\n' "${config_symlinks_to_gitignore[@]}" >> .gitignore
echo "Transient symlinks have been created in this repo. Added these lines to .gitignore:"
for line in "${config_symlinks_to_gitignore[@]}"
do
    # .gitignore doesn't parse leading ./, so remove this.
    fixed_line="$(echo "$line" | sed 's/^\.\///')"
    echo "$fixed_line" | tee -a .gitignore
done
