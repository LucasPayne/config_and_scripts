# Resources
#     Sample inputrc: https://www.gnu.org/software/bash/manual/html_node/Sample-Init-File.html

set editing-mode vi

# Change cursor styles.
set show-mode-in-prompt on
$if term=screen
    # Send to driven terminal in screen, the escape code for this
    # is \033P...\033\\.
    # See https://www.gnu.org/software/screen/manual/html_node/Control-Sequences.html
    set vi-ins-mode-string \1\033P\033[6 q\033\\\2
    set vi-cmd-mode-string \1\033P\033[2 q\033\\\2
$else
    set vi-ins-mode-string \1\e[5 q\2
    set vi-cmd-mode-string \1\e[2 q\2
$endif

$if mode=vi
    set keymap vi-command
    
    # Reload ~/.inputrc
    "\C-x\C-r": re-read-init-file

    Control-l: clear-screen
    # Vim bindings
    "ciw": "wbcw"
    "diw": "wbdw"
    "ci\"": "F\"lct\""
    "ci(": "F(ldt)i"
    "ci)": "F(ldt)i"
    "dH": "d^"
    "dL": "d$"
    "cH": "c^"
    "cL": "c$"

    # Match line-editing from vimrc
    "H": "^"
    "L": "$"
    # Vim-surround
    "siw\"": "wbi\"jkea\"jkwbh"
    "siw'": "wbi'jkea'jkwbh"
    "siw(": "wbi(jkea)jkwbh"
    "siw)": "wbi(jkea)jkwbh"
    "ds\"": "F\"mtxf\"x`t"
    "ds'": "F'mtxf'x`t"
    "ds(": "F(mtxf)x`t"
    "ds)": "F(mtxf)x`t"

    "sL\"": "mti\"jkLa\"jk`t"
    "sH\"": "mti\"jkHa\"jk`t"
    "sL'": "mti'jkLa'jk`t"
    "sH'": "mti'jkHa'jk`t"
    "sL(": "mti(jkLa)jk`t"
    "sH(": "mti(jkHa)jk`t"
    "sL)": "mti(jkLa)jk`t"
    "sH)": "mti(jkHa)jk`t"

    "ss\"": "A\"jkI\"jkH"
    "ss'": "A'jkI'jkH"
    "ss(": "A)jkI(jkH"
    "ss)": "A)jkI(jkH"
    "ss$": "A)jkI$(jkH"
    # Surround with $().
    "siw$": "wbi$(jkea)jkwbhh"
    "sL$": "mti$(jkLa)jk`t"
    "sH$": "mti$(jkHa)jk`t"
    "sL$": "mti$(jkLa)jk`t"
    "sH$": "mti$(jkHa)jk`t"
    # Todo: This isn't accurate, need to back-search for $(.
    "ds$": "F$mtxxf)x`t"
    # Add a preceding $ to parenthesis.
    "cs($": "mtF(i$jk`t"
    "cs)$": "mtF(i$jk`t"
    # Todo: fix these.
    # "cs'\"": "F\"r'mtf\"r'`t"
    # "cs\"'": "F'r\"mtf'r\"`t"

    # Todo:
    # More complete text objects.
    # C-A to start of line
    # It could be useful for these commands to understand escape sequences.
    # Ctrl-P, Ctrl-N history search.
    # Yank with vim text objects.
    # Ctrl-W (seems to work in bash, not in e.g. python readline).

    set keymap vi-insert
    Control-l: clear-screen
    "jk": vi-movement-mode
    "\e.": yank-last-arg
$endif
