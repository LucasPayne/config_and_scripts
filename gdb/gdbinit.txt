set print asm-demangle

# If break points are set up for every API call (for example every entry point into a shared library),
# this command will step through a trace.
# Anything useful to extract from the API call can be put in here.
define apitrace
    continue
    python
f = open("/tmp/gdb_apitrace_func", "w+")
f.write(str(gdb.selected_frame().function()))
f.close()
    end
    select-frame 1
end

# renderdoc
add-auto-load-safe-path /home/lucas/dev/vulkan/renderdoc/build/lib/librenderdoc.so-gdb.py

# Navigate the stack
define stack_up
    python
gdb.selected_frame().older().select()
    end
end
define stack_down
    python
gdb.selected_frame().newer().select()
    end
end

# Workaround. I think vim TermDebug might only update the source view if frame or select-frame is run (?)
define __vim_write_selected_frame_number
    python
#--------------------------------------------------------------------------------
selected_identifier = str(gdb.selected_frame())
cur = gdb.newest_frame()
counter = 0
while True:
    if str(cur) == selected_identifier:
        break
    cur = cur.older()
    counter += 1
f = open("/tmp/gdb__vim_write_selected_frame_number", "w+")
f.write(str(counter))
f.close()
#--------------------------------------------------------------------------------
    end
end


define __vim_serialize_stacktrace
    python
#    ,---------------------------------------------------------------------------
#   /
#  /
# /
#/ 
import json
import subprocess

def serialize_frame(frame):
    val = {}

    symtab = frame.find_sal().symtab
    exit_code = 1
    if symtab:
        exit_code, result = subprocess.getstatusoutput('realpath {}'.format(symtab.filename))
    if exit_code == 0:
        val["type"] = "Source"
        val["binary"] = symtab.objfile.filename
        val["filename"] = symtab.filename
        val["function"] = str(frame.function())
        val["line"] = frame.find_sal().line
    else:
        val["type"] = "Binary"
        val["binary"] = gdb.solib_name(int(frame.pc()))
    return val

frames = []
cur = gdb.newest_frame()
while cur:
    frames.append(serialize_frame(cur))
    cur = cur.older()
val = {
    "frames" : frames
}
f = open("/tmp/gdb__vim_serialize_stacktrace", "w+")
f.write(json.dumps(val, indent=2) + "\n")
f.close()
#\ 
# \
#  \
#   \
#    '---------------------------------------------------------------------------
    end
end

#--------------------------------------------------------------------------------
# pwndbg
# source /home/lucas/dev/gdb/repos/pwndbg/gdbinit.py
# set context-clear-screen


define json_serialize_breakpoints
    python
#    ,---------------------------------------------------------------------------
#   /
#  /
# /
#/ 
lines = gdb.execute("maint info break", to_string=True).split("\n")

import sys
import os
import re
import json

out = {}

lines = [line.strip() for line in lines]
pattern = re.compile(r"^(\d)\.(\d)[ ]+(y|n)[ ]+(0x[0-9a-f]+).*$")
for line in lines:
    result = pattern.match(line)
    if result:
        major = result.group(1)
        minor = result.group(2)
        address = result.group(4)
        if major not in out:
            out[major] = []

        val = {}
        val["minor"] = minor
        val["address"] = address

        out[major].append(val)

prev_out = out
out = { "breakpoints" : [] }
for major in prev_out:
    val = {}
    val["major"] = major
    val["locations"] = prev_out[major]
    out["breakpoints"].append(val)

dev = os.environ["GDB_DEV"]
f = open(dev+"/state/breakpoints", "w+")
json.dump(out, f, indent=4)
f.close()

#\ 
# \
#  \
#   \
#    '---------------------------------------------------------------------------
    end
end
