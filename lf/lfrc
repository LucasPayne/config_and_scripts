# lfrc - lf configuration file
# lf - Terminal file manager
#
# Resources:
#    man 1 lf
#    https://github.com/gokcehan/lf
#    https://github.com/gokcehan/lf/wiki/
#    https://github.com/gokcehan/lf/wiki/Tips
#    https://wiki.archlinux.org/title/Lf

# LF-LANGUAGE UTILITIES
#<<<
#https://github.com/gokcehan/lf/wiki/Tips
# eval: Run an lf command after expanding $ shell syntax (envvars and command substitution).
# lf-language doesn't have an env-var syntax.
# However it can access env-vars from subshells,
# and subshells can send commands to lf.
# So, routing a command line through a subshell
# has the effect of expanding environment variables.
cmd eval &{{
    cmd="send $id"
    for arg; do
        cmd="$cmd $(eval "printf '%s' \"$arg\"" | sed 's/\\/\\\\/g;s/ /\\ /g;s/"/\\"/g')"
    done
    lf -remote "$cmd"
}}
#>>>

# BASIC COMMANDS
#<<<
# Add more state pagers like the builtins maps, cmaps, and cmds.
# query server-command can request history and jumps.
cmd history $lf -remote "query $id history" | $PAGER
cmd jumps $lf -remote "query $id jumps" | $PAGER
# query server-command does not currently have an "options" option, so do this using lf_* envvars.
cmd options ${{
    env | grep ^lf_ | while read -r line ;
    do
        # Convert lf_<option>=<value> env output to a more readable form.
        if [[ $line =~ ^lf_([^=]+)=(.*)$ ]]
        then
            option="${BASH_REMATCH[1]}"
            value="${BASH_REMATCH[2]}"
            printf '%s = %s\n' "$option" "$value"
        fi
    done | $PAGER
}}
# Load selection from a file
cmd load-selection ${{
    if [ $# -ne 1 ]
    then
        lf -remote "send $id echoerr \"Usage: load-selection <selection_file>\""
        exit 1
    fi
    lf -remote "send $id unselect"
    selection_file="$1"
    while read -r line
    do
        #todo: Quoting
        #todo: This is very slow, any way to just set the selection directly?
        lf -remote "send $id toggle \"$line\""
    done < <(cat "$selection_file")
}}
# Save selection to a file
cmd save-selection ${{
    if [ $# -ne 1 ]
    then
        lf -remote "send $id echoerr \"Usage: save-selection <selection_file>\""
        exit 1
    fi
    selection_file="$1"
    >"$selection_file"
    while read -r entry
    do
        realpath "$entry" >> "$selection_file"
    done < <(echo "$fx")
}}
#>>>

# LF-LANGUAGE LIBRARIES
#<<<
# "Link" to lfrc_lib.lfso "library".
# This allows lf config to be spread across multiple files.
# lfrc_lib/Makefile will generate this "library" from .lf files.
# note: If lf language had wildcards this would be easier.
eval source "$CONFIG_DIR/lf/lfrc_lib/build/lfrc_lib.lfso"
#>>>

# OPTIONS
#<<<
set shell bash
eval set previewer "$CONFIG_DIR/lf/previewer.sh"
#todo:?
set ifs ' '
set nodrawbox
set noicons
set ignorecase
set mouse
set sortby natural
set info
# Jump to the next search match while typing.
set incsearch
# Show results in filter mode.
set incfilter
# Use globs in filter mode.
#-Why is this normal searches fail? Shouldn't searches with non-glob chars be the same as before?
#set globfilter

#>>>

# MAPPINGS
#<<<
# Filtering <<<
map f :set user_filter_mode "filter"; filter
map F :set user_filter_mode "filter-find"; filter; cmd-end; cmd-delete-home
map U setfilter

cmap <enter> &{{
    if [ "$lf_mode" = filter ]
    then
        case "$lf_user_filter_mode" in
            filter-find)
                lf -remote "send $id :cmd-enter; setfilter; open"
                ;;
            filter)
                lf -remote "send $id :cmd-enter"
                ;;
        esac
    else
        lf -remote "send $id cmd-enter"
    fi
}}

# View selection in a pager.
#TODO: Use -selection-file. This doesn't appear to be an option made available in lf-language.
map <a-s> $cat $XDG_RUNTIME_DIR/lf/primary_selection | $PAGER

# Select filtered files.
# Overrides filter mode.
cmap <a-s> &{{
    if [ "$lf_mode" = filter ]
    then
        lf -remote "send $id :cmd-enter; glob-select *; setfilter"
    fi
}}

cmap <a-j> &{{
    if [ "$lf_mode" = filter ]
    then
        lf -remote "send $id down"
    fi
}}
cmap <a-k> &{{
    if [ "$lf_mode" = filter ]
    then
        lf -remote "send $id up"
    fi
}}

#>>>
# System mappings<<<
# Make Ctrl-Z work as SIGTSTP as usual.
#https://github.com/gokcehan/lf/issues/357
map <c-z> $ kill -TSTP $PPID
#>>>
# z (info and ordering) mappings <<<
#
# Defaults:
# z a: map za set info size:time
# z h: map zh set hidden!
# z n: map zn set info
# z r: map zr set reverse!
# z s: map zs set info size
# z t: map zt set info time
# Own
#>>>
# s (sorting) mappings <<<
# Defaults
# s n: set sortby natural; set info
# s s: set sortby size; set info size
# s t: set sortby time; set info time
# s a: set sortby atime; set info atime
# s c: set sortby ctime; set info ctime
# s e: set sortby ext; set info
# Own
# s N:
map sN set sortby name; set info
#>>>
# leader-\ mappings <<<
# Leader key: \
map \\b :set drawbox!
#>>>
# Mouse mappings<<<
# Middle click
#todo: middle click to select and toggle
#    Why doesn't this push work? Might be special logic for working with mouse position
#    which no longer works when <m-1> is routed through push.
#map <m-3> push <m-1><space>
#>>>
# Alt mappings <<<
map <a-m> maps
map <a-M> cmaps
map <a-c> cmds
map <a-C> options

map <a-h> LFRC::execute-from-history
# Clear command first.
cmap <a-h> :cmd-end; cmd-delete-home; LFRC::execute-from-history

#>>>
# General mappings
map i $LESSOPEN='| ~/config/lf/previewer.sh %s' less -R $f
map <enter> open
map D LFRC::mkdir
map T LFRC::touch

cmd yank-dirname ${{
    dirname -- "$f" | head -c-1 | xclip -i -selection clipboard
}}
cmd yank-path ${{
    printf '%s' "$f" | xclip -i -selection clipboard
}}

# Set wallpaper
cmd wp ${{
    wp "$f"
}}

map <a-f> :LFRC::fzf_jump 0
map <a-r> :LFRC::fzf_jump 1
map x :LFRC::unarchive
map g :top
map w
# Just open a text file.
map e &{{
    for file in $fx ; do
        case $(file --mime-type -Lb $file) in
            text/*)
                v --nostdin "$file"
            ;;
        esac
    done
}}
map <a-y> :yank-path
#map <a-j> :down
#map <a-k> :up
map <a-l> :open; quit

# Open file
map o :LFRC::open-file

#todo: O, open without window focus change.
#>>>

# SELECTION
#<<<
set user_selection_file ""

cmd on-select ${{
    selection_file="$lf_user_selection_file"
    if [ ! -z "$selection_file" ]
    then
        if [ ! -f "$selection_file" ]
        then
            lf -remote "send $id echoerr \"error: Selection file \\\"$selection_file\\\" doesn't exist.\""
            exit 1
        fi
        echo "$fx" > "$selection_file"
    fi
}}

#>>>

# Source auto-generated config
eval source "$CONFIG_DIR/scripts/syncer_files/syncer-lf"

# Source custom profile
# ${{
#     if [ -z ${LF_PROFILE+x} ]
#     then
#         export LF_PROFILE=default
#     fi
# }}
# 
# ${{
#     echo $LF_PROFILE
# }}
