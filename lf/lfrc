# lfrc - lf configuration file
# lf - Terminal file manager
#
# Resources:
#    man 1 lf
#    https://github.com/gokcehan/lf
#    https://github.com/gokcehan/lf/wiki/
#    https://github.com/gokcehan/lf/wiki/Tips
#    https://wiki.archlinux.org/title/Lf

# Default runtime directory (for e.g. selection files).
# Caller can set this manually when running lf with `lf --command=`.
#NOTE: Would prefer to get this from envvar but having trouble with eval and async.
set user_runtime_dir "/run/user/1000/lf"

# LF-LANGUAGE UTILITIES
#<<<
#https://github.com/gokcehan/lf/wiki/Tips
# eval: Run an lf command after expanding $ shell syntax (envvars and command substitution).
# lf-language doesn't have an env-var syntax.
# However it can access env-vars from subshells,
# and subshells can send commands to lf.
# So, routing a command line through a subshell
# has the effect of expanding environment variables.
#NOTE: This is run as an async command.
#      It is useless(?) to run blocking as the lf -remote is async itself.
#      So can only use this to spawn "jobs", 
cmd eval &{{
    cmd="send $id"
    for arg; do
        cmd="$cmd $(eval "printf '%s' \"$arg\"" | sed 's/\\/\\\\/g;s/ /\\ /g;s/"/\\"/g')"
    done
    lf -remote "$cmd"
}}
#>>>

# EVENT HOOKS
#<<<

#Waiting for release 34 for on-init
#cmd on-init ${{
#    $load-selection
#    #$load-focus
#}}

#todo: Reduce flicker, command is run when cursor moves,
#      when scrolling the display issues are prominent.
cmd on-select :{{
    $save-focus
    #-useful at all?
    redraw
}}
#-doesn't appear to help
#cmd on-select &{{
#    lf -remote "send $id save-focus; redraw"
#}}
cmd on-quit :{{
    $save-selection
    $save-focus
}}
#-This doesn't appear to be working in my usual setup.
# In VS code terminal, it looks like it is continuously called...
# Also combined with flickering, is load-selection causing a flicker
# which also causes focus to gain again?
#cmd on-focus-gained :{{
#    &load-selection
#}}

#>>>

# LF COMMAND OVERRIDES (open, etc.)
#<<<
cmd open :LFRC::open-file
#>>>

# BASIC COMMANDS
#<<<
# Add more state pagers like the builtins maps, cmaps, and cmds.
# query server-command can request history and jumps.
cmd history $lf -remote "query $id history" | $PAGER
cmd jumps $lf -remote "query $id jumps" | $PAGER
# query server-command does not currently have an "options" option, so do this using lf_* envvars.
cmd options ${{
    env | grep ^lf_ | while read -r line ;
    do
        # Convert lf_<option>=<value> env output to a more readable form.
        if [[ $line =~ ^lf_([^=]+)=(.*)$ ]]
        then
            option="${BASH_REMATCH[1]}"
            value="${BASH_REMATCH[2]}"
            printf '%s = %s\n' "$option" "$value"
        fi
    done | $PAGER
}}

#>>>

# LF-LANGUAGE LIBRARIES
#<<<
# "Link" to lfrc_lib.lfso "library".
# This allows lf config to be spread across multiple files.
# lfrc_lib/Makefile will generate this "library" from .lf files.
# note: If lf language had wildcards this would be easier.
# note: This is currently run async so functions might not be loaded in initialization...
eval source "$CONFIG_DIR/lf/lfrc_lib/build/lfrc_lib.lfso"
#>>>

# OPTIONS
#<<<
set shell bash
eval set previewer "$CONFIG_DIR/lf/previewer.sh"
#todo:?
set ifs ' '
set nodrawbox
set noicons
set ignorecase
set mouse
set sortby natural
set info
# Jump to the next search match while typing.
set incsearch
# Show results in filter mode.
set incfilter
# Use globs in filter mode.
#-Why is this normal searches fail? Shouldn't searches with non-glob chars be the same as before?
#set globfilter
# Preview directories
set dirpreviews
#>>>

# MAPPINGS
#<<<
# Filtering <<<
map f :set user_filter_mode "filter"; filter
map <a-/> :set user_filter_mode "filter"; filter
map F :set user_filter_mode "filter-find"; filter; cmd-end; cmd-delete-home
map U setfilter
cmap <a-l> :cmd-enter; setfilter; LFRC::open
map <a-l> :LFRC::open

cmap <enter> &{{
    if [ "$lf_mode" = filter ]
    then
        case "$lf_user_filter_mode" in
            filter-find)
                lf -remote "send $id :cmd-enter; setfilter; LFRC::open"
                ;;
            filter)
                lf -remote "send $id :cmd-enter"
                ;;
        esac
    else
        lf -remote "send $id cmd-enter"
    fi
}}

# View selection in a pager.
map <a-s> $cat "$lf_user_runtime_dir/$lf_user_selection_file" | $PAGER

# Select filtered files.
# Overrides filter mode.
cmap <a-s> &{{
    if [ "$lf_mode" = filter ]
    then
        lf -remote "send $id :cmd-enter; glob-select *; on-selection-changed; setfilter"
    fi
}}

cmap <a-j> &{{
    if [ "$lf_mode" = filter ]
    then
        lf -remote "send $id down"
    fi
}}
cmap <a-k> &{{
    if [ "$lf_mode" = filter ]
    then
        lf -remote "send $id up"
    fi
}}

#>>>
# System mappings<<<
# Make Ctrl-Z work as SIGTSTP as usual.
#https://github.com/gokcehan/lf/issues/357
map <c-z> $ kill -TSTP $PPID
cmap <c-z> $ kill -TSTP $PPID
# Ctrl-C to quit.
map <c-c> quit
# Default: Ctrl-C in command mode cancels the command.
#>>>
# z (info and ordering) mappings <<<
#
# Defaults:
# z a: map za set info size:time
# z h: map zh set hidden!
# z n: map zn set info
# z r: map zr set reverse!
# z s: map zs set info size
# z t: map zt set info time
# Own
#>>>
# s (sorting) mappings <<<
# Defaults
# s n: set sortby natural; set info
# s s: set sortby size; set info size
# s t: set sortby time; set info time
# s a: set sortby atime; set info atime
# s c: set sortby ctime; set info ctime
# s e: set sortby ext; set info
# Own
# s N:
map sN set sortby name; set info
#>>>
# leader-\ mappings <<<
# Leader key: \
map \\b :set drawbox!
# Toggle ratios
# note: This should be in-line with where ratios are set elsewhere.
# idea: Maybe should have a different ratio setting which those functions call.
map \\c ${{
    if [ "$lf_ratios" = "1:2:3" ]
    then
        lf -remote "send $id set ratios 1:2"
    else
        lf -remote "send $id set ratios 1:2:3"
    fi
}}
#>>>
# Mouse mappings<<<
# Middle click
#todo: middle click to select and toggle
#    Why doesn't this push work? Might be special logic for working with mouse position
#    which no longer works when <m-1> is routed through push.
#map <m-3> push <m-1><space>
#>>>
# Alt mappings <<<
map <a-m> maps
map <a-M> cmaps
map <a-c> cmds
map <a-C> options

map <a-h> LFRC::execute-from-history
# Clear command first.
cmap <a-h> :cmd-end; cmd-delete-home; LFRC::execute-from-history

#>>>
# General mappings
map i $LESSOPEN='| ~/config/lf/previewer.sh %s' less -R $f
map <enter> open
map l open
map D LFRC::mkdir
map T LFRC::touch
# move faster
map J :down; down; down; down
map K :up; up; up; up

cmd yank-dirname ${{
    dirname -- "$f" | head -c-1 | xclip -i -selection clipboard
}}
cmd yank-path ${{
    printf '%s' "$f" | xclip -i -selection clipboard
}}

# Set wallpaper
cmd wp ${{
    wp "$f"
}}

map <a-f> :LFRC::fzf_jump 0
map <a-r> :LFRC::fzf_jump 1
map x :LFRC::unarchive
map g :top
map w
# Just open a text file.
map e &{{
    for file in $fx ; do
        case $(file --mime-type -Lb $file) in
            text/*)
                v --nostdin "$file"
            ;;
        esac
    done
}}
map <a-y> :yank-path
#map <a-j> :down
#map <a-k> :up

# Checkout navigation, should have same effect as from shell, but uses this existing lf session.
cmd lf-checkout-find-config &lf-checkout-find ~/config
map <a-i> :lf-checkout-find-config

cmd lf-checkout-find-dev &lf-checkout-find ~/drive/dev
map <a-e> :lf-checkout-find-dev

cmd lf-checkout-find-code &lf-checkout-find ~/code
map <a-q> :lf-checkout-find-code

cmd lf-checkout-find-documentation &lf-checkout-find ~/drive/dev/documentation
map <a-d> :lf-checkout-find-documentation

#todo
cmd open ${{
    v "$f" &
}}

# Open file
map o :LFRC::open-file

#todo: O, open without window focus change.
#>>>

# SELECTION
#<<<
# Track selection.
# Default to primary selection
set user_selection_file "primary_selection"
# Track cursor focus. This is sometimes called "selection" in the docs/discussions, but this is a confusion.
set user_focus_file "primary_focus"

# Workaround for no on-selection-changed.
# (on-select is really "on-focus-cursor-changed", see https://github.com/gokcehan/lf/issues/1332)
cmd on-selection-changed :{{
    &save-selection
}}
map u :unselect; on-selection-changed
map v :invert; on-selection-changed
#map <space> :toggle; down; on-selection-changed
#no moving down
map <space> :toggle; on-selection-changed

#>>>

# Source auto-generated config
eval source "$CONFIG_DIR/scripts/syncer_files/syncer-lf"

# Waiting for release 34 for on-init
# Running here for now.
$load-selection
#Don't load the focus automatically, as that would break UX (you want to be newly focused on new lf window).
#$load-focus
