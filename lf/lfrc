set shell bash
set ifs " "
#set drawbox
#set icons
set ignorecase
set mouse
set previewer ~/.config/lf/previewer.sh
set sortby 'name'
map i $LESSOPEN='| ~/.config/lf/previewer.sh %s' less -R $f

cmd open &{{
    # Open all images in the directory into the gallery view.
    # The first image will be the selected one.
    case $(file --mime-type -Lb $f) in
        image/jpeg|image/png)
            #NOTE: Code here depends on no spaces in filenames.
            files=$(
                printf "$f "
                find . -mindepth 1 -maxdepth 1 | cut -d/ -f2- | while read -r file ; do
                    mime=$(file --mime-type -Lb $file)
                    if [[ "$file" != "$(basename $f)" ]] && ( [[ "$mime" == "image/jpeg" ]] || [[ "$mime" == "image/png" ]] ) ; then
                        printf "$file "
                    fi
                done
            )
            feh $files
            exit
            ;;
    esac

    while read -r file ; do
        case $(file --mime-type -Lb "$file") in
            text/*|application/json|application/xml|inode/x-empty)
                v --nostdin "$file"
                ;;
            video/*|application/pdf)
                xdg-open "$file"
                ;;
            audio/*)
                xdg-open "$file"
                ;;
            application/zip)
                v --nostdin "$file"
                ;;
            *)
                # Don't try to open it.
                ;;
        esac
    done < <(echo "$fx")
}}

# :-command versions of utilities.
# These can prompt for an entry if called with no arguments.
cmd mkdir %{{
    if [ "$#" -eq 0 ] ; then
        printf "Directory name: "
        read ans
        mkdir "$ans"
    else
        mkdir "$@"
    fi
}}
cmd touch %{{
    if [ "$#" -eq 0 ] ; then
        printf "File name: "
        read ans
        touch "$ans"
    else
        touch "$@"
    fi
}}

cmd fzf_jump ${{
    is_recursive="$1"
    if [ "$is_recursive" -eq 1 ] ; then
        find_args=""
    else
        find_args="-mindepth 1 -maxdepth 1"
    fi
    res="$(find . $find_args | fzf --ansi --border=none --reverse --color=no | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ] ; then
        cmd="cd"
    elif [ -f "$res" ] ; then
        cmd="select"
    else
        exit 0
    fi
    lf -remote "send $id $cmd \"$res\""
}}

cmd unarchive ${{
    case $f in
        *.zip)
            unzip "$f"
            ;;
        *.tar.gz)
            tar xzvf "$f"
            ;;
        *.tar.bz2)
            echo "zip"
            tar xjvf "$f"
            ;;
        *.tar)
            echo "tar"
            tar xvf "$f"
            ;;
        *)
            echo "Unhandled format"
            ;;
    esac
}}

cmd yank-dirname ${{
    dirname -- "$f" | head -c-1 | xclip -i -selection clipboard
}}
cmd yank-path ${{
    printf '%s' "$f" | xclip -i -selection clipboard
}}

# Set wallpaper
cmd wp ${{
    wp $f
}}

# Make a directory
cmd make_dir %{{
    printf "Make directory: "
    read ans
    mkdir -p "$ans"
}}
map D make_dir

# Make a file
cmd touch_file %{{
    printf "Touch file: "
    read ans
    touch "$ans"
}}
map T touch_file


map f :fzf_jump 0
map F :fzf_jump 1
map <a-f> :fzf_jump 0
map <a-r> :fzf_jump 1
map x :unarchive
map g :top
map <enter> :open
map w
# Just open a text file.
map e &{{
    for file in $fx ; do
        case $(file --mime-type -Lb $file) in
            text/*)
                v --nostdin "$file"
            ;;
        esac
    done
}}
map <a-y> :yank-path
map <a-j> :down
map <a-k> :up


source ~/config/scripts/syncer_files/syncer-lf

