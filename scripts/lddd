#!/bin/bash
#
# List dynamic libraries and descriptions, if found.
#
# Notes: 
#     It is assumed library paths have no spaces.
#

usage_and_exit () {
    echo "Usage:"
    echo "    lddd FILE"
    echo "    lddd -p PID"
    exit 1
}

if [ "$#" -eq 1 ] ; then
    path="$1"
    library_paths="$(ldd "$path" | grep '=>' | cut -d' ' -f 3 | sed '/^$/d ; s/^[[:space:]]*//' | xargs -I {} realpath {} | sort | uniq)"
elif [ "$#" -eq 2 ] ; then
    if [[ "$1" != "-p" ]] ; then
        usage_and_exit
    fi
    pid="$2"
    library_paths="$(cat /proc/$pid/maps | grep '\.so' | awk '{ print $NF }' | xargs -I {} realpath {} | sort | uniq)"
else
    usage_and_exit
fi
    
declare -A pkg_to_libraries
libraries_with_no_package=""

for lib in $library_paths ; do
    dpkg_package_line="$(dpkg -S "$lib" 2>/dev/null)"
    if [ "$?" -eq 0 ] ; then
        dpkg_package="$(echo "$dpkg_package_line" | cut -d':' -f 1)"
        pkg_to_libraries[$dpkg_package]="${pkg_to_libraries[$dpkg_package]} $lib"
    else
        libraries_with_no_package="$libraries_with_no_package $lib"
    fi
done

for dpkg_package in "${!pkg_to_libraries[@]}" ; do
    c16 red
    echo "$dpkg_package"
    c16 blue
    for lib in ${pkg_to_libraries[$dpkg_package]} ; do
        echo "  $lib"
    done
    c16 --reset
    dpkgdesc "$dpkg_package"
done

if [[ ! -z "$libraries_with_no_package" ]] ; then
    c16 red
    echo "(no package source)"
    c16 blue
    for lib in $libraries_with_no_package ; do
        echo "  $lib"
    done
    c16 --reset
fi
