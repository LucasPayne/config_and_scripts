#!/bin/bash
# readme: Utility for readme files and other software information.
# -d <package_name>: Output README for a dpkg package.
# -D <package_name>: Output README.Debian for a dpkg package.
# -p No pager
# -m <package_name>: Output man pages for a dpkg package.

usage ()
{
    local exit_code="$1"
    2>&1 echo "Try 'readme --help' or 'readme -h' for more information."
    exit "$exit_code"
}

func=
func_args=()
set_func ()
{
    local func_name="$1"
    shift
    if [ -n "$func" ]
    then
        usage 1
    fi
    func="$func_name"
    while [ "$#" -gt 0 ]
    do
        func_args+=("$1")
        shift
    done
}

if [ -t 1 ]
then
    if [ ! -z "${PAGER+x}" ]
    then
        #todo: Check, can PAGER contain arguments?
        pager_command="$PAGER"
    else
        pager_command=less
    fi
else
    pager_command=cat
fi

while getopts ":hpd:D:m:-:" opt
do
    case $opt in
        h)
            set_func help
            ;;
        d)
            set_func dpkg_readme "$OPTARG"
            ;;
        D)
            set_func dpkg_readme_debian "$OPTARG"
            ;;
        p)
            pager_command=cat
            ;;
        m)
            set_func dpkg_manpages "$OPTARG"
            ;;
        *)
            case $OPTARG in
                d)
                    [ -n "$func" ] && usage 1 || 2>&1 echo "Usage: -d <package name> "
                    ;;
                D)
                    [ -n "$func" ] && usage 1 || 2>&1 echo "Usage: -D <package name> "
                    ;;
                *)
                    [ -n "$func" ] && usage 1 || 2>&1 echo "Unknown flag -$OPTARG"
                    ;;
            esac
            exit 1
            ;;
    esac
done

[ $OPTIND -eq 1 ] && usage 0

func_help ()
{
    echo "readme:"
    echo "    -d <package_name>: Print debian README file from /usr/share/doc/<package_name>."
    echo "    -D <package_name>: Print debian README.Debian file from /usr/share/doc/<package_name>."
}

do_check_dpkg_installed ()
{
    local package_name="$1"
    if ! dpkg -l "$package_name" >/dev/null 2>&1
    then
        2>&1 echo "error: Package \"$package_name\" is not installed."
        return 1
    fi
    if ! dpkg -l "$package_name" 2>/dev/null | tail -1 | grep -q -E '^ii '
    then
        2>&1 echo "error: Package \"$package_name\" is uninstalled."
        return 1
    fi
}

dpkg_readme_common ()
{
    local extensions=()
    [ "$1" = "normal" ] && extensions=("" ".md") || extensions=(".Debian")
    local package_name="$2"

    do_check_dpkg_installed "$package_name" || return 1

    local package_dir="/usr/share/doc/$package_name"
    if [ ! -d "$package_dir" ]
    then
        2>&1 echo "error: Non-existant $package_dir."
        return 1
    fi

    for extension in "${extensions[@]}"
    do
        if [ -f "$package_dir/README$extension" ]
        then
            cat "$package_dir/README$extension" | $pager_command
            return 0
        elif [ -f "$package_dir/README$extension.gz" ]
        then
            gunzip -c "$package_dir/README$extension.gz" | $pager_command
            return 0
        fi
    done

    for extension in "${extensions[@]}"
    do
        2>&1 echo "error: README$extension file not found in $package_dir"
    done
    return 1
}

func_dpkg_readme ()
{
    dpkg_readme_common normal "$@"
}

func_dpkg_readme_debian ()
{
    dpkg_readme_common debian "$@"
}

section_descriptions=(
"1) Executable programs or shell commands"
"2) System calls (functions provided by the kernel)"
"3) Library calls (functions within program libraries)"
"4) Special files (usually found in /dev)"
"5) File formats and conventions, e.g. /etc/passwd"
"6) Games"
"7) Miscellaneous (including macro packages and conventions), e.g. man(7), groff(7)"
"8) System administration commands (usually only for root)"
"9) Kernel routines [Non standard]"
)

func_dpkg_manpages ()
{
    local package_name="$1"

    do_check_dpkg_installed "$package_name" || return 1
    dpkg_manpages_files="$(dpkg -L "$package_name" | grep -E '^/usr/share/man/man[[:digit:]]/' | xargs -r basename -a | sort | uniq)"
    if [ -z "$dpkg_manpages_files" ]
    then
        return 0
    fi
    (
        for i in {1..9}
        do
            section_manpages="$(echo "$dpkg_manpages_files" | grep -E '\.'$i'\.gz$' | xargs -r basename -s .$i.gz)"
            if [ ! -z "$section_manpages" ]
            then
                echo "$section_manpages" | sed "s/^/$i /"
            fi
        done
    ) | $pager_command
}

func_$func "${func_args[@]}"
