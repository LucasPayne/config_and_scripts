#!/bin/bash
# waitwindow: wait until the PID has windows, then print the first window ID.
# This assumes _NET_WM_PID is set on the window.
#
# Possible bugs:
# If the process creates multiple windows quickly, only one will be returned.
# Todo: Return the first created one, is there a way to check when an X window was created?
#
# Notes:
# --parent option doesn't seem useful for the blocking case.
# If anything it might get an unexpected parent window.
# But waitwindow is also a general "get window" command, it is not just for when blocking is expected.

usage ()
{
    echo "Usage:"
    echo "    Wait for any window on given pid:"
    echo "        waitwindow <PID>"
    echo "    Wait for any window on any parent or parent-of-parent etc. process of this pid:"
    echo "        waitwindow --parent/-r <PID>"
    echo "    Print help:"
    echo "        waitwindow --help/-h"
}

# Options
opt_parent=0
if [ $# -eq 2 ] && [[ "$1" =~ ^(--parent|-r)$ ]]
then
    opt_parent=1
    shift
fi

if [ $# -ne 1 ]
then
    >&2 usage
    exit 1
fi

if [[ "$1" =~ ^(--help|-h)$ ]]
then
    usage
    exit 0
fi

# Arguments
pidarg="$1"
if [[ ! "$pidarg" =~ ^[0-9]+$ ]]
then
    >&2 echo "invalid pid: $pidarg"
    exit 1
fi

while true
do
    if [ $opt_parent -eq 1 ]
    then
        pids="$(ppids "$pidarg")"
    else
        pids="$pidarg"
    fi
    for pid in $pids
    do
        window_ids="$(xdotool search --pid "$pid" 2>/dev/null)"
        if [ $? -eq 0 ] && [ ! -z "$window_ids" ]
        then
            wid="$(echo "$window_ids" | head -1)"
            # Sanity check that the window exists.
            # (Might not be necessary, todo check if xdotool search output is always window IDs.)
            if xdotool getwindowname "$wid" >/dev/null 2>&1
            then
                echo "$wid"
                exit 0
            fi
        fi
    done
    sleep 0.1
done

# Shouldn't get here.
exit 1
