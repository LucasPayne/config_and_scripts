#!/bin/bash

# Colors
#------------------------------------------------------------
# colors16
#   View the 16 terminal colors.
# colors16 [pattern]
#   Print the foreground sequence for the color matching pattern.
# colors16 -bg [pattern]
#   Print the background sequence for the color matching pattern.
# colors16 -r
#   Print the reset color code.
    # Notes:
    #   Could use
    #       tput setaf [color_number]
    #       tput setab [color_number]
colors=$(cat <<EOF
Black
Red
Green
Yellow
Blue
Magenta
Cyan
White
EOF
)

if [ "$#" -ne 0 ] ; then

    # Print the color reset character code.
    if [ "$1" == "-r" ] || [ "$1" == "--reset" ] ; then
        printf "\u001b[0m"
        # if [ -t 1 ] ; then
        #     echo
        # fi
        exit 0
    fi

    # future: use getopts
    is_background=0
    if [ "$1" == "-bg" ] ; then
        is_background=1
        shift
    fi
    if [ "$#" -eq 0 ] ; then
        >&2 echo "A color pattern must be provided."
        exit 1
    fi

    colorpattern="$1"
    shift
    match="$(echo "$colors" | cat -n | grep -i --color=never "$colorpattern")"

    if [ "$is_background" -eq 1 ] ; then
        color_code_base=40
    else
        color_code_base=30
    fi

    if [ "$(echo "$match" | wc --lines)" -eq 1 ] ; then
        linenr="$(echo "$match" | awk '{print $1}')"
        color_code="$((color_code_base + linenr-1))"

        if [ "$#" -eq 2 ] ; then
            if [ "$1" == "-e" ] ; then
                shift
                echo_this="$1"
                bg_flag=""
                if [ "$is_background" -eq 1 ] ; then bg_flag="-bg" ; fi
                echo -e "$(colors16 $bg_flag "$colorpattern")$echo_this$(colors16 --reset)"
                exit 0
            fi
        fi

        printf "\u001b[${color_code}m"
        # printf "$color_code"

        # https://unix.stackexchange.com/questions/515778/how-does-a-program-know-if-stdout-is-connected-to-a-terminal-or-a-pipe
        # if [ ! -t 0 ] ; then
        #     echo
        # fi
        exit 0
    fi

    >&2 echo "\"$colorpattern\" does not match a color."


exit 1
fi

( counter=0
while read color
do
    fg_color_code=$((30+counter))
    bg_color_code=$((40+counter))
    printf "$color \u001b[${bg_color_code}m\u001b[${fg_color_code}m____\u001b[0m  \u001b[${bg_color_code};1m\u001b[${fg_color_code};1m____\u001b[0m"
    echo
    let counter++
done < <(echo "$colors") ) | column

# printf "\u001b[30mBlack\u001b[0m  " ; printf "\u001b[40m    \u001b[0m" ; echo
# printf "\u001b[31mRed\u001b[0m  " ; printf "\u001b[41m    \u001b[0m" ; echo
# printf "\u001b[32mGreen\u001b[0m  " ; printf "\u001b[42m    \u001b[0m" ; echo
# printf "\u001b[33mYellow\u001b[0m  " ; printf "\u001b[43m    \u001b[0m" ; echo
# printf "\u001b[34mBlue\u001b[0m  " ; printf "\u001b[44m    \u001b[0m" ; echo
# printf "\u001b[35mMagenta\u001b[0m  " ; printf "\u001b[45m    \u001b[0m" ; echo
# printf "\u001b[36mCyan\u001b[0m  " ; printf "\u001b[46m    \u001b[0m" ; echo
# printf "\u001b[37mWhite\u001b[0m  " ; printf "\u001b[47m    \u001b[0m" ; echo
